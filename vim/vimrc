set nocompatible

set backspace=indent,eol,start

set history=1000

"Show (partial) command in the last line of the screen. 
set showcmd

set laststatus=2

set wildmenu

set ruler

set cursorline

"set autoindent
set smartindent


"When there is a previous search pattern, highlight all its matches.
"When you get bored looking at the highlighted matches, you can turn it
"off with |:nohlsearch|.  This does not change the option value, as
set hlsearch

"While typing a search command, show where the pattern, as it was typed
"so far, matches.  The matched string is highlighted.  If the pattern
"is invalid or not found, nothing is shown.  The screen will be updated
"often, this is only useful on fast terminals.
set incsearch

"Avoid showing many @ for long lines  
set display+=lastline


"set spell


"Encoding set
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

"Shown the line number 
set number

"set tabstop=4

set foldenable			"Enable folding
set foldlevelstart=10 	"Open most of the folds by default. If set to 0, all folds will be closed.
set foldnestmax=10		"Folds can be nested. Setting a max value protects you from too many folds.
set foldmethod=manual		"Define the type of folding.

"set foldmethod=syntax

"set foldlevelstart=1

"let perl_fold=1		" Perl
"let per_fold_block=1		" Fold blocks in if statements, etc. in Perl
"let sh_fold_enable=1		" sh - enable function folding
"let vimsyn_folding='af'	" Vim script
"let r_syntax_folding=1		" R
"let ruby_fold=1		" Ruby
"let php_folding=1		"PHP
"let javaScript_fold=1		"JavaScript
"let xml_syntax_folding=1	"XML



set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)

set directory=$HOME/.vim/swp//

set backupdir=~/.vim/.backup//

set undofile
set undodir =~/.vim/.undo//

set dictionary+=~/.vim/dictionary/dic.txt

"Ctags search
set tags=./tags;,tags


syntax enable

"filetype on		" required
filetype off		" required

set runtimepath+=~/.vim/myOwnsnippets/
set runtimepath+=~/.vim/plugged/vim-snippets/UltiSnips/


"Specify a directory for plugins
"- For Neovim: stdpath('data') . '/plugged'
"- Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

"Make sure you use single quotes

"Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'lervag/vimtex'
Plug 'wakatime/vim-wakatime'



"Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
"Plug 'junegunn/vim-easy-align'

"Any valid git URL is allowed
"Plug 'https://github.com/junegunn/vim-github-dashboard.git'

"On-demand loading
"Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

"Using a non-default branch
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

"Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
"Plug 'fatih/vim-go', { 'tag': '*' }

"Plugin options
"Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

"Plugin outside ~/.vim/plugged with post-update hook
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

"Unmanaged plugin (manually installed and updated)
"Plug '~/my-prototype-plugin'

"Initialize plugin system
call plug#end()


let g:tex_flavor='latex'

"let g:vimtex_compiler_latexmk_engines = {'_':'-xelatex'}
"let g:vimtex_compiler_latexrun_engines ={'_':'xelatex'}


"let g:vimtex_compiler_latexmk_engines = {'_':'-pdflatex'}
"let g:vimtex_compiler_latexrun_engines ={'_':'pdflatex'}

let g:vimtex_compiler_latexmk_engines = {'_':'-lualatex'}
let g:vimtex_compiler_latexrun_engines ={'_':'lualatex'}


let g:vimtex_view_method='zathura'
let g:vimtex_view_general_options_latexmk = '-reuse-instance'

let g:vimtex_quickfix_mode=0

"UltiSnips Setting

let g:UltiSnipsSnippetDirectories=["UltiSnips","myOwnsnippets"]

let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<c-j>'
let g:UltiSnipsJumpBackwardTrigger='<c-k>'


let g:netrw_browse_split = 4
let g:netrw_winsize = 20
let g:netrw_liststyle = 3
